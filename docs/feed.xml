<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MIO - Dev Blog</title>
    <description>Development blog for MexicoInsuranceOnline.com written by developers for agents selling Mexico insurance.
</description>
    <link>http://dev-blog.mexicoinsuranceonline.com/</link>
    <atom:link href="http://dev-blog.mexicoinsuranceonline.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 01 Mar 2017 23:39:07 +0000</pubDate>
    <lastBuildDate>Wed, 01 Mar 2017 23:39:07 +0000</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Dumb Templates, Smart Design</title>
        <description>&lt;p&gt;What good is having code running inside your templates, anyway?&lt;/p&gt;

&lt;!-- /excerpt --&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;MVC pattern&lt;/a&gt; is a wonderful thing.  It helps developers design resilient, testable, and well structured applications.  Almost every web framework is centered around MVC (&lt;a href=&quot;http://www.phoenixframework.org/&quot;&gt;Phoenix&lt;/a&gt;, withstanding).  So why, then, do most of these frameworks allow you to embed code directly into the view layer?&lt;/p&gt;

&lt;p&gt;View layers tend to allow code because developers immediately run into problems when they need to iterate over a list of items.  And, let’s face it, with a CRUD operation, that’s one of the first things you do.  One can justify leaving code in the view layer, because it adds flexibility.  The last thing you want is to have your view templates be a limiting factor in your application.&lt;/p&gt;

&lt;p&gt;Mexico Insurance Online’s application, however, is a solid exception to that rule.  We have some… &lt;em&gt;substantial&lt;/em&gt; resellers who sell directly to their customers through the application.  Those resellers demand an entirely custom view.  From the font on a &amp;lt;label&amp;gt; tag to which fields appear on a given form, everything can, and will, be customized.  To that end, a bit of rigidity actually makes life easier, let me show you.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/zendesk/curly&quot;&gt;Curly Templates&lt;/a&gt; is what Mexico Insurance Online’s application will use for the view layer in our rebuild project.  The magic of Curly lies in its Presenter classes:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CommentPresenter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Curly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Presenter&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;presents&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:comment&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;replies&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;content_tag&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:div&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;replies&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;reply&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A single presenter, such as the above, can be shared across multiple views.  If a resellers needs to customize the way that replies are presented, then an alternative to the &lt;code class=&quot;highlighter-rouge&quot;&gt;_reply.html.curly&lt;/code&gt; file can be created, leaving the rest of the view un-touched.&lt;/p&gt;

&lt;p&gt;Had this view been implemented with the ERB syntax that comes with Ruby on Rails, then both the main application and the custom view for the reseller would need the loop code.  Given that Mexico Insurance Online has 296 white-label templates at the moment, this means there would be 296 loops to update if something changed.&lt;/p&gt;

&lt;p&gt;This may seem like something simple, but the white-labeling provided by Mexico Insurance Online is crucial to its continued success.&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Mar 2017 00:00:00 +0000</pubDate>
        <link>http://dev-blog.mexicoinsuranceonline.com/2017/03/01/dumb-templates.html</link>
        <guid isPermaLink="true">http://dev-blog.mexicoinsuranceonline.com/2017/03/01/dumb-templates.html</guid>
        
        
      </item>
    
      <item>
        <title>Rebuild vs. Refactor</title>
        <description>&lt;p&gt;Rebuilding vs Refactoring is an argument as old as software itself, and
Mexico Insurance Online is no except.&lt;/p&gt;

&lt;!-- /excerpt --&gt;

&lt;p&gt;Rebuilding means starting from scratch with an entirely new application, and building from the foundation up.  Refactoring is the opposite, taking your existing application and “fixing” it.&lt;/p&gt;

&lt;p&gt;Many websites and consultants will try to get you to shy away from rebuilding because it is expensive in both time and money.  You’ll probably hear phrases like, “there is no bad code”, or “never throw away code”.  No matter how badly you bang up a car, you can always fix it; but will it ever be the same?  It all comes back to “don’t reinvent the wheel”.  In this case, you have a wheel, don’t build a new one.&lt;/p&gt;

&lt;p&gt;Alternatively, &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_refactoring&quot;&gt;refactoring&lt;/a&gt; your application allows you to keep your existing code, but Make It Better™.  Refactoring yields many of the same benefits as a rebuild, but you may be able to see the benefits right away.  The downside to refactoring is the code you encounter in a non-software business.  If you’re lucky, your business has grown since you first built your application.  New features were added at a feverish pace with no regard for the quality of code, after all the due date was a firm “Yesterday”.  And why should you be worried about your application, you don’t sell software, you sell Widgets!  This means that there are some deep, dark, hacks going on in that application.  And since you’re refactoring, you probably won’t be rid of them for as long time.&lt;/p&gt;

&lt;p&gt;So what did Mexico Insurance Online decide?  Other factors in the business, such as wanting to expand our IT department and wanting more robust (business-friendly) documentation, swayed the decision firmly into Rebuild territory.  Our current system runs on a language that is losing support quickly, and a framework that was born of an age when PHP was the “New Hotness”.  As a result, we’ve decided to rebuild in a more modern language and framework.&lt;/p&gt;

&lt;p&gt;This isn’t to say that refactoring wouldn’t be good for your business, but it just wasn’t the right fit for us.&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Feb 2017 00:00:00 +0000</pubDate>
        <link>http://dev-blog.mexicoinsuranceonline.com/2017/02/07/rebuild-vs-refactor.html</link>
        <guid isPermaLink="true">http://dev-blog.mexicoinsuranceonline.com/2017/02/07/rebuild-vs-refactor.html</guid>
        
        
      </item>
    
      <item>
        <title>Developer Tools - Jack</title>
        <description>&lt;p&gt;We developers &lt;strong&gt;love&lt;/strong&gt; our tools; here are Jack’s favorites.
&lt;!-- /excerpt --&gt;
Tools can make all the difference in the world to a developer.  Everything from
the keyboard you physically type on, to the browser you test code in.  It all
lends a hand in making developers as efficient as possible.&lt;/p&gt;

&lt;h2 id=&quot;physical-interface&quot;&gt;Physical Interface&lt;/h2&gt;

&lt;p&gt;Let’s get it out of the way… I develop on a 15” MacBook Pro.  Why, you may
ask?  I find that it is much more efficient to develop on a machine as close
to the server as possible and MacOS is a close cousin to the Linux based
servers where MIO runs.  MacOS also alleviates the hassle of configuring
monitors, networks, keyboards, mice, etc, that you may find in a Linux
environment.&lt;/p&gt;

&lt;p&gt;I also use gaming accessories for things like a
&lt;a href=&quot;http://www.razerzone.com/&quot;&gt;Razer&lt;/a&gt; Blackwidow Ultimate keyboard, and an old
Razer Naga mouse I had lying around.  I find they are very comfortable to me, 
and a joy to use.&lt;/p&gt;

&lt;h2 id=&quot;editor&quot;&gt;Editor&lt;/h2&gt;

&lt;p&gt;In the last year I’ve switched from &lt;a href=&quot;http://www.vim.org/&quot;&gt;vim&lt;/a&gt; to Github’s
&lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt; editor.  Atom provides the same great keyboard-only
experience as vim, but with community plugins and some additional features.&lt;/p&gt;

&lt;h2 id=&quot;terminal&quot;&gt;Terminal&lt;/h2&gt;

&lt;p&gt;In order to start servers and really get around in a Unix-like OS (such as
MacOS), a good terminal is required.  MacOS’s built in Terminal is fantastic,
but I find &lt;a href=&quot;https://hyper.is/&quot;&gt;Hyper&lt;/a&gt;’s customization to be worth the switch.&lt;/p&gt;

&lt;p&gt;I also run ZSH for my shell, and
&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;Oh-My-ZSH&lt;/a&gt; to add tools to the
command line.&lt;/p&gt;

&lt;h2 id=&quot;virtualization&quot;&gt;Virtualization&lt;/h2&gt;

&lt;p&gt;MIO uses a lot of tools in many different languages. In order to keep these all
neat and tidy, we make extensive use of &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;. 
Docker allows me to have different development environments running on the
same machine without clomping all over each other.  As an example, this blog
is written using a version of Ruby that would conflict with the version we use
to develop custom UI’s for some agents.  Before Docker, it could take hours of
work to switch between those two projects.  With Docker I can ignore that
dependancy and just start working.&lt;/p&gt;

</description>
        <pubDate>Wed, 14 Dec 2016 00:00:00 +0000</pubDate>
        <link>http://dev-blog.mexicoinsuranceonline.com/2016/12/14/developer-tools.html</link>
        <guid isPermaLink="true">http://dev-blog.mexicoinsuranceonline.com/2016/12/14/developer-tools.html</guid>
        
        
      </item>
    
      <item>
        <title>Change Control Process Tools</title>
        <description>&lt;p&gt;MIO’s Change control process keeps everyone on track and on time.
&lt;!-- /excerpt --&gt;
Our Change Control Process (CCP) was developed to bridge the gap between our
business (insurance) interests and our development (IT) interests.&lt;/p&gt;

&lt;p&gt;Our process is broken up into XXX distinct phases:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Feature Requests - Agents or Underwriters request a new feature or a
change to an existing feature.&lt;/li&gt;
  &lt;li&gt;Documentation - Our Project Manager gathers requirements from the agent or
underwriter in order to create documentation and wireframes of the feature.&lt;/li&gt;
  &lt;li&gt;Approval - All documentation requires approval by MIO’s management team.
This is to ensure that the request has been fully captured into the
documentation.  A priority and timeline are also set.&lt;/li&gt;
  &lt;li&gt;Implementation - A developer, designer, or systems administrator, take the
documentation and begin implenting the change.&lt;/li&gt;
  &lt;li&gt;Testing - A tester, using a staging environment, rigerously tests all
aspects of the system that may be affected by the change at hand.&lt;/li&gt;
  &lt;li&gt;Acceptance - MIO’s management team and the agent or underwriter who
requested the change are given a change to ensure that the&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;fogbugz&quot;&gt;FogBugz&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.fogcreek.com/fogbugz/&quot;&gt;FogBugz&lt;/a&gt; is the cornerstone of our
development process.  In FogBugz, we use their Wiki functionality for creating
and keeping track of our documentation (but not wireframing), their ticketing
system for tracking individual change requests, their planner for managing
sprints and estimates, and their
&lt;a href=&quot;https://www.fogcreek.com/fogbugz/devhub&quot;&gt;Dev Hub&lt;/a&gt; for managing our source code.&lt;/p&gt;

&lt;h2 id=&quot;lucid-chart&quot;&gt;Lucid Chart&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.lucidchart.com/&quot;&gt;Lucid Chart&lt;/a&gt; is a tool we use for Wireframing and
flow charts.  Everything in Lucid Chart is stored in Google Drive, and
accessible via a web link, so the wireframes and charts are easily shared.&lt;/p&gt;
</description>
        <pubDate>Wed, 14 Dec 2016 00:00:00 +0000</pubDate>
        <link>http://dev-blog.mexicoinsuranceonline.com/2016/12/14/change-control-tools.html</link>
        <guid isPermaLink="true">http://dev-blog.mexicoinsuranceonline.com/2016/12/14/change-control-tools.html</guid>
        
        
      </item>
    
  </channel>
</rss>
